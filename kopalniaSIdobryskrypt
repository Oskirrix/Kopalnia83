// ==UserScript==
// @name         Margonem Kopalnia (panel Gargonem - flaga UA + loot Discord, poprawne porównanie nicków)
// @namespace    http://tampermonkey.net/
// @version      3.8
// @description  Flaga UA w panelu Gargonem + wysyłanie lootów na Discord, poprawne porównanie nicków (bez lvla w nawiasie)
// @author       Kuchar
// @match        https://*.margonem.pl/*
// @exclude      https://margonem.pl/
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // --- KONFIGURACJA ---
    const SERVER_URL = 'https://kopalnia83.onrender.com';
    const ukraineFlagURL = 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/Flag_of_Ukraine.svg/24px-Flag_of_Ukraine.svg.png';
    const REGISTER_INTERVAL = 10 * 1000;
    const ACTIVE_CHECK_INTERVAL = 10 * 1000;

    // --- KONFIGURACJA DISCORD WEBHOOK ---
    const DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1374483070010265631/8NcxnxFprvWY7f0XHV2ID6fxC15dNv-ssJMJLDZRy7_jBEjBfpXh2R4wcRqfC-LTJIVO';

    // --- ZMIENNE GLOBALNE ---
    let lastActiveNicks = [];

    // --- REJESTRACJA NA BACKENDZIE ---
    function getPlayerName() {
        let nickElem = document.querySelector('#nick');
        return nickElem ? nickElem.textContent.trim() : null;
    }

    function registerAddon() {
        const nick = getPlayerName();
        if (!nick) return;
        fetch(`${SERVER_URL}/register`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({nick})
        }).catch(e => console.error('[KopalniaAddon] Błąd rejestracji:', e));
    }

    async function updateActiveNicks() {
        try {
            const response = await fetch(`${SERVER_URL}/active`);
            if (!response.ok) throw new Error('Błąd pobierania listy aktywnych');
            lastActiveNicks = await response.json();
            drawFlagsInGargonemPanel();
        } catch (e) {
            console.error('[KopalniaAddon] Błąd aktywnych:', e);
        }
    }

    // --- FUNKCJA NORMALIZUJĄCA NICK ---
    function normalizeNick(nick) {
        // Usuwa lvl w nawiasie (np. "Sigma Kamilek (83w)") lub na końcu (np. "Sigma Kamilek 83w")
        return nick.replace(/\s*\(.*?\)$/, '').replace(/\s+\d+\w?$/, '').trim().toLowerCase();
    }

    // --- FLAGA UA W PANELU GARGONEM (porównanie po oczyszczeniu nicku) ---
    function drawFlagsInGargonemPanel() {
        const list = document.querySelector('.gargonem-otherlist-list');
        if (!list) return;
        list.querySelectorAll('.gargonem-flex.gargonem-otherlist-other').forEach(row => {
            const nickDiv = row.querySelector('.gargonem-otherlist-left');
            if (!nickDiv) return;
            const nick = nickDiv.textContent.trim();
            let hasAddon = false;
            for (const activeNick of lastActiveNicks) {
                if (normalizeNick(activeNick) === normalizeNick(nick)) {
                    hasAddon = true;
                    break;
                }
            }
            const oldFlag = nickDiv.querySelector('.addon-flag-ua');
            if (oldFlag) oldFlag.remove();
            if (!hasAddon) {
                const flag = document.createElement('img');
                flag.src = ukraineFlagURL;
                flag.className = 'addon-flag-ua';
                flag.style.cssText = 'vertical-align: middle; margin-left: 4px; width: 16px; height: 11px;';
                nickDiv.appendChild(flag);
            }
        });
    }

    // --- BEZPIECZNE OBSERWOWANIE PANELU GARGONEM (bez zapętlenia) ---
    function observeGargonemPanel() {
        let lastCount = -1;
        function checkAndDraw() {
            const list = document.querySelector('.gargonem-otherlist-list');
            if (!list) {
                setTimeout(checkAndDraw, 1000);
                return;
            }
            // Rysuj flagi tylko, gdy liczba graczy się zmieniła
            const count = list.querySelectorAll('.gargonem-flex.gargonem-otherlist-other').length;
            if (count !== lastCount) {
                lastCount = count;
                drawFlagsInGargonemPanel();
            }
            setTimeout(checkAndDraw, 500); // sprawdzaj tylko co pół sekundy
        }
        checkAndDraw();
    }

    // --- MODUŁ LOOTÓW NA DISCORD (oryginalny z Twojego skryptu) ---
    function sendToDiscord(message) {
        fetch(DISCORD_WEBHOOK_URL, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({content: message})
        }).catch(e => console.error('Błąd wysyłania do Discord:', e));
    }

    function parseItemTip(tip) {
        if (!tip) return null;
        const decoded = tip.replace(/&quot;/g, '"').replace(/&lt;/g, '<').replace(/&gt;/g, '>');
        const nameMatch = decoded.match(/<b class="item-name">([^<]+)<\/b>/);
        const name = nameMatch ? nameMatch[1] : 'Nieznany przedmiot';
        const isUnique = /class="unique".*unikat/i.test(decoded);
        const isHeroic = /class="heroic".*heroi/i.test(decoded);
        const isLegendary = /class="legendary".*legen/i.test(decoded);
        const typeMatch = decoded.match(/<span class="type-text">Typ:\s*([^<]+)<\/span>/);
        const type = typeMatch ? typeMatch[1].trim() : '';
        const amountMatch = decoded.match(/<span class="amount-text">Ilość:\s*(\d+)\s*<\/span>/);
        const amount = amountMatch ? amountMatch[1] : '1';
        let rarity = 'Zwykły';
        if (isLegendary) rarity = 'Legendarny';
        else if (isHeroic) rarity = 'Heroiczny';
        else if (isUnique) rarity = 'Unikatowy';
        return { name, rarity, type, amount };
    }

    function setupLootObserver() {
        function tryInit() {
            const lootsContainer = document.getElementById('loots');
            if (!lootsContainer) {
                setTimeout(tryInit, 1000);
                return;
            }
            const sentLootIds = new Set();
            const observer = new MutationObserver(mutations => {
                mutations.forEach(mutation => {
                    mutation.addedNodes.forEach(node => {
                        if (!(node instanceof HTMLElement)) return;
                        const lootWrappers = node.matches('.loot-wrapper') ? [node] : node.querySelectorAll('.loot-wrapper');
                        lootWrappers.forEach(lootWrapper => {
                            const lootId = lootWrapper.id || lootWrapper.querySelector('.item')?.id || null;
                            if (!lootId) return;
                            if (sentLootIds.has(lootId)) return;
                            sentLootIds.add(lootId);
                            const itemDiv = lootWrapper.querySelector('.item');
                            if (!itemDiv) return;
                            const itemInfo = parseItemTip(itemDiv.getAttribute('tip') || itemDiv.getAttribute('ctip'));
                            if (!itemInfo) return;
                            if (itemInfo.rarity === 'Zwykły') return;
                            const playerName = getPlayerName() || 'Nieznany gracz';
                            const time = new Date().toLocaleTimeString();
                            const message = `[${time}] ${playerName} zdobył: **${itemInfo.name}** (${itemInfo.rarity}) x${itemInfo.amount} - Typ: ${itemInfo.type}`;
                            sendToDiscord(message);
                        });
                    });
                });
            });
            observer.observe(lootsContainer, {childList: true, subtree: true});
        }
        tryInit();
    }

    // --- START ---
    registerAddon();
    updateActiveNicks();
    setInterval(registerAddon, REGISTER_INTERVAL);
    setInterval(updateActiveNicks, ACTIVE_CHECK_INTERVAL);
    observeGargonemPanel();
    setupLootObserver();

})();
